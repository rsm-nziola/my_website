{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Multinomial Logit Model\"\n",
        "author: \"Nicole Ziola\"\n",
        "date: 05-25-2025\n",
        "---\n",
        "\n",
        "\n",
        "This assignment expores two methods for estimating the MNL model: (1) via Maximum Likelihood, and (2) via a Bayesian approach using a Metropolis-Hastings MCMC algorithm. \n",
        "\n",
        "\n",
        "## 1. Likelihood for the Multi-nomial Logit (MNL) Model\n",
        "\n",
        "Suppose we have $i=1,\\ldots,n$ consumers who each select exactly one product $j$ from a set of $J$ products. The outcome variable is the identity of the product chosen $y_i \\in \\{1, \\ldots, J\\}$ or equivalently a vector of $J-1$ zeros and $1$ one, where the $1$ indicates the selected product. For example, if the third product was chosen out of 3 products, then either $y=3$ or $y=(0,0,1)$ depending on how we want to represent it. Suppose also that we have a vector of data on each product $x_j$ (eg, brand, price, etc.). \n",
        "\n",
        "We model the consumer's decision as the selection of the product that provides the most utility, and we'll specify the utility function as a linear function of the product characteristics:\n",
        "\n",
        "$$ U_{ij} = x_j'\\beta + \\epsilon_{ij} $$\n",
        "\n",
        "where $\\epsilon_{ij}$ is an i.i.d. extreme value error term. \n",
        "\n",
        "The choice of the i.i.d. extreme value error term leads to a closed-form expression for the probability that consumer $i$ chooses product $j$:\n",
        "\n",
        "$$ \\mathbb{P}_i(j) = \\frac{e^{x_j'\\beta}}{\\sum_{k=1}^Je^{x_k'\\beta}} $$\n",
        "\n",
        "For example, if there are 3 products, the probability that consumer $i$ chooses product 3 is:\n",
        "\n",
        "$$ \\mathbb{P}_i(3) = \\frac{e^{x_3'\\beta}}{e^{x_1'\\beta} + e^{x_2'\\beta} + e^{x_3'\\beta}} $$\n",
        "\n",
        "A clever way to write the individual likelihood function for consumer $i$ is the product of the $J$ probabilities, each raised to the power of an indicator variable ($\\delta_{ij}$) that indicates the chosen product:\n",
        "\n",
        "$$ L_i(\\beta) = \\prod_{j=1}^J \\mathbb{P}_i(j)^{\\delta_{ij}} = \\mathbb{P}_i(1)^{\\delta_{i1}} \\times \\ldots \\times \\mathbb{P}_i(J)^{\\delta_{iJ}}$$\n",
        "\n",
        "Notice that if the consumer selected product $j=3$, then $\\delta_{i3}=1$ while $\\delta_{i1}=\\delta_{i2}=0$ and the likelihood is:\n",
        "\n",
        "$$ L_i(\\beta) = \\mathbb{P}_i(1)^0 \\times \\mathbb{P}_i(2)^0 \\times \\mathbb{P}_i(3)^1 = \\mathbb{P}_i(3) = \\frac{e^{x_3'\\beta}}{\\sum_{k=1}^3e^{x_k'\\beta}} $$\n",
        "\n",
        "The joint likelihood (across all consumers) is the product of the $n$ individual likelihoods:\n",
        "\n",
        "$$ L_n(\\beta) = \\prod_{i=1}^n L_i(\\beta) = \\prod_{i=1}^n \\prod_{j=1}^J \\mathbb{P}_i(j)^{\\delta_{ij}} $$\n",
        "\n",
        "And the joint log-likelihood function is:\n",
        "\n",
        "$$ \\ell_n(\\beta) = \\sum_{i=1}^n \\sum_{j=1}^J \\delta_{ij} \\log(\\mathbb{P}_i(j)) $$\n",
        "\n",
        "\n",
        "\n",
        "## 2. Simulate Conjoint Data\n",
        "\n",
        "We will simulate data from a conjoint experiment about video content streaming services. We elect to simulate 100 respondents, each completing 10 choice tasks, where they choose from three alternatives per task. For simplicity, there is not a \"no choice\" option; each simulated respondent must select one of the 3 alternatives. \n",
        "\n",
        "Each alternative is a hypothetical streaming offer consistent of three attributes: (1) brand is either Netflix, Amazon Prime, or Hulu; (2) ads can either be part of the experience, or it can be ad-free, and (3) price per month ranges from \\$4 to \\$32 in increments of \\$4.\n",
        "\n",
        "The part-worths (ie, preference weights or beta parameters) for the attribute levels will be 1.0 for Netflix, 0.5 for Amazon Prime (with 0 for Hulu as the reference brand); -0.8 for included adverstisements (0 for ad-free); and -0.1*price so that utility to consumer $i$ for hypothethical streaming service $j$ is \n",
        "\n",
        "$$\n",
        "u_{ij} = (1 \\times Netflix_j) + (0.5 \\times Prime_j) + (-0.8*Ads_j) - 0.1\\times Price_j + \\varepsilon_{ij}\n",
        "$$\n",
        "\n",
        "where the variables are binary indicators and $\\varepsilon$ is Type 1 Extreme Value (ie, Gumble) distributed.\n",
        "\n",
        "The following code provides the simulation of the conjoint data.\n",
        "\n",
        ":::: {.callout-note collapse=\"true\"}"
      ],
      "id": "b2898557"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "np.random.seed(123)\n",
        "\n",
        "brand = [\"N\", \"P\", \"H\"] \n",
        "ad = [\"Yes\", \"No\"]\n",
        "price = np.arange(8, 33, 4)\n",
        "\n",
        "import itertools\n",
        "profiles = pd.DataFrame(list(itertools.product(brand, ad, price)), columns=[\"brand\", \"ad\", \"price\"])\n",
        "m = len(profiles)\n",
        "\n",
        "b_util = {\"N\": 1.0, \"P\": 0.5, \"H\": 0.0}\n",
        "a_util = {\"Yes\": -0.8, \"No\": 0.0}\n",
        "p_util = lambda p: -0.1 * p\n",
        "\n",
        "n_peeps = 100\n",
        "n_tasks = 10\n",
        "n_alts = 3\n",
        "\n",
        "def sim_one(id):\n",
        "    datlist = []\n",
        "\n",
        "    for t in range(1, n_tasks + 1):\n",
        "        sampled = profiles.sample(n=n_alts).copy()\n",
        "        sampled.insert(0, \"resp\", id)\n",
        "        sampled.insert(1, \"task\", t)\n",
        "\n",
        "        sampled[\"v\"] = (\n",
        "            sampled[\"brand\"].map(b_util) +\n",
        "            sampled[\"ad\"].map(a_util) +\n",
        "            sampled[\"price\"].apply(p_util)\n",
        "        ).round(10)\n",
        "\n",
        "        sampled[\"e\"] = -np.log(-np.log(np.random.rand(n_alts)))\n",
        "        sampled[\"u\"] = sampled[\"v\"] + sampled[\"e\"]\n",
        "\n",
        "        sampled[\"choice\"] = (sampled[\"u\"] == sampled[\"u\"].max()).astype(int)\n",
        "\n",
        "        datlist.append(sampled)\n",
        "\n",
        "    return pd.concat(datlist, ignore_index=True)\n",
        "\n",
        "conjoint_data = pd.concat([sim_one(i) for i in range(1, n_peeps + 1)], ignore_index=True)\n",
        "\n",
        "conjoint_data = conjoint_data[[\"resp\", \"task\", \"brand\", \"ad\", \"price\", \"choice\"]]\n",
        "\n",
        "print(conjoint_data.head())"
      ],
      "id": "ab537b9d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. Preparing the Data for Estimation\n",
        "\n",
        "The \"hard part\" of the MNL likelihood function is organizing the data, as we need to keep track of 3 dimensions (consumer $i$, covariate $k$, and product $j$) instead of the typical 2 dimensions for cross-sectional regression models (consumer $i$ and covariate $k$). The fact that each task for each respondent has the same number of alternatives (3) helps.  In addition, we need to convert the categorical variables for brand and ads into binary variables."
      ],
      "id": "5a81dcb4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('conjoint_data.csv')\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "conjoint_clean = pd.get_dummies(df, columns=[\"brand\", \"ad\"], drop_first=True)\n",
        "\n",
        "conjoint_clean = conjoint_clean.rename(columns={\n",
        "    \"brand_N\": \"brand_netflix\",\n",
        "    \"brand_P\": \"brand_prime\",\n",
        "    \"ad_Yes\": \"ad_yes\"\n",
        "})\n",
        "\n",
        "conjoint_clean[\"alt_id\"] = conjoint_clean.groupby([\"resp\", \"task\"]).cumcount() + 1\n",
        "\n",
        "conjoint_clean = conjoint_clean[[\n",
        "    \"resp\", \"task\", \"alt_id\",\n",
        "    \"brand_netflix\", \"brand_prime\", \"ad_yes\", \"price\",\n",
        "    \"choice\"\n",
        "]]\n",
        "\n",
        "\n",
        "print(conjoint_clean.head(10))"
      ],
      "id": "1ae8888f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Estimation via Maximum Likelihood"
      ],
      "id": "6da7e68f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.optimize import minimize\n",
        "from numpy.linalg import inv\n",
        "\n",
        "X = conjoint_clean[[\"brand_netflix\", \"brand_prime\", \"ad_yes\", \"price\"]].astype(float).values\n",
        "y = conjoint_clean[\"choice\"].values\n",
        "\n",
        "groups = conjoint_clean.groupby([\"resp\", \"task\"]).indices\n",
        "choice_sets = list(groups.values())\n",
        "\n",
        "def log_likelihood(beta):\n",
        "    log_lik = 0\n",
        "    for idx in choice_sets:\n",
        "        X_set = X[idx]\n",
        "        y_set = y[idx]\n",
        "        utilities = X_set @ beta\n",
        "        exp_utilities = np.exp(utilities)\n",
        "        probs = exp_utilities / np.sum(exp_utilities)\n",
        "        log_lik += np.log(probs[y_set == 1][0])\n",
        "    return -log_lik  \n",
        "\n",
        "initial_beta = np.zeros(X.shape[1])\n",
        "result = minimize(log_likelihood, initial_beta, method=\"BFGS\")\n",
        "\n",
        "beta_hat = result.x\n",
        "hessian_inv = result.hess_inv\n",
        "std_errors = np.sqrt(np.diag(hessian_inv))\n",
        "\n",
        "z = 1.96  # critical value for 95% CI\n",
        "conf_ints = np.vstack([beta_hat - z * std_errors, beta_hat + z * std_errors]).T\n",
        "\n",
        "param_names = [\"beta_netflix\", \"beta_prime\", \"beta_ads\", \"beta_price\"]\n",
        "summary = pd.DataFrame({\n",
        "    \"Parameter\": param_names,\n",
        "    \"Estimate\": beta_hat,\n",
        "    \"Std. Error\": std_errors,\n",
        "    \"95% CI Lower\": conf_ints[:, 0],\n",
        "    \"95% CI Upper\": conf_ints[:, 1]\n",
        "})\n",
        "\n",
        "print(summary)"
      ],
      "id": "34b78c37",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. Estimation via Bayesian Methods"
      ],
      "id": "cf6db4f7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy.special import logsumexp\n",
        "\n",
        "X = conjoint_clean[[\"brand_netflix\", \"brand_prime\", \"ad_yes\", \"price\"]].astype(float).values\n",
        "y = conjoint_clean[\"choice\"].values\n",
        "group_keys = conjoint_clean[[\"resp\", \"task\"]].apply(tuple, axis=1)\n",
        "choice_sets = [np.where(group_keys == key)[0] for key in sorted(set(group_keys))]\n",
        "\n",
        "def log_likelihood(beta):\n",
        "    log_lik = 0.0\n",
        "    for idx in choice_sets:\n",
        "        X_set = X[idx]\n",
        "        y_set = y[idx]\n",
        "        utilities = X_set @ beta\n",
        "        log_lik += utilities[y_set == 1][0] - logsumexp(utilities)\n",
        "    return log_lik\n",
        "\n",
        "\n",
        "def log_prior(beta):\n",
        "    prior_var = np.array([25, 25, 25, 1])  \n",
        "    return -0.5 * np.sum((beta ** 2) / prior_var)\n",
        "\n",
        "def log_posterior(beta):\n",
        "    return log_likelihood(beta) + log_prior(beta)\n",
        "\n",
        "n_draws = 11000\n",
        "burn_in = 1000\n",
        "n_params = 4\n",
        "samples = np.zeros((n_draws, n_params))\n",
        "beta_current = np.zeros(n_params)\n",
        "log_post_current = log_posterior(beta_current)\n",
        "\n",
        "proposal_sd = np.array([0.05, 0.05, 0.05, 0.005])\n",
        "\n",
        "for t in range(n_draws):\n",
        "    proposal = beta_current + np.random.normal(loc=0, scale=proposal_sd)\n",
        "    log_post_proposal = log_posterior(proposal)\n",
        "    \n",
        "    log_accept_ratio = log_post_proposal - log_post_current\n",
        "    if np.log(np.random.rand()) < log_accept_ratio:\n",
        "        beta_current = proposal\n",
        "        log_post_current = log_post_proposal\n",
        "    \n",
        "    samples[t] = beta_current\n",
        "\n",
        "samples_post = samples[burn_in:]\n",
        "posterior_means = np.mean(samples_post, axis=0)\n",
        "posterior_std = np.std(samples_post, axis=0)\n",
        "posterior_ci_lower = np.percentile(samples_post, 2.5, axis=0)\n",
        "posterior_ci_upper = np.percentile(samples_post, 97.5, axis=0)\n",
        "\n",
        "param_names = [\"beta_netflix\", \"beta_prime\", \"beta_ads\", \"beta_price\"]\n",
        "posterior_summary = pd.DataFrame({\n",
        "    \"Parameter\": param_names,\n",
        "    \"Posterior Mean\": posterior_means,\n",
        "    \"Std. Dev\": posterior_std,\n",
        "    \"95% CI Lower\": posterior_ci_lower,\n",
        "    \"95% CI Upper\": posterior_ci_upper\n",
        "})\n",
        "\n",
        "print(posterior_summary)"
      ],
      "id": "bd504076",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "_todo: code up a metropolis-hasting MCMC sampler of the posterior distribution. Take 11,000 steps and throw away the first 1,000, retaining the subsequent 10,000._\n"
      ],
      "id": "3540434e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "posterior_samples = samples_post  \n",
        "\n",
        "beta_idx = 0 \n",
        "param_name = \"Beta_Netflix\"\n",
        "\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(posterior_samples[:, beta_idx], color=\"blue\", alpha=0.6)\n",
        "plt.title(f\"Trace Plot: {param_name}\")\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"Value\")\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(posterior_samples[:, beta_idx], bins=30, color=\"skyblue\", edgecolor=\"black\")\n",
        "plt.title(f\"Posterior Distribution: {param_name}\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "36f9b690",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The results from the Maximum Likelihood approach are approximately the same compared to the estimation via Bayesian Methods. \n",
        "\n",
        "\n",
        "\n",
        "## 6. Discussion\n",
        "\n",
        "\n",
        "If we did not simulate the data and only saw the parameter estimates, we would interpret the values as reflecting consumer preferences inferred from real-world consumer trends. $\\beta_\\text{Netflix} > \\beta_\\text{Prime}$ suggests that customers tend to prefer Netflix over Amazon Prime, which tracks with our intuition about streaming service brands. The higher beta parameter means that customers are more likely to choose Netflix over Prime, indicating Netflix's higher percieved value or brand equity. \n",
        "\n",
        "It makes sense that $\\beta_\\text{price}$ is negative because our intuition of supply and demand is that as prices increase, utility decrease. All else equal, consumers prefer lower costs. \n",
        "\n",
        "For \"real world\" conjoint data, we need to allow differences by individual. Therefore, we would need to allow the beta parameters to vary by individual, instead of having a fixed value across the population. Thus, the simulated data would need to have individual-level coefficients,generate choices based off of the individual beta parameters, and then estimate with a Bayesian hierarchical model.\n",
        "\n",
        "This approach captures heterogeneity in preferences, which is a key aspect of real-world conjoint data, allowing different people to value different choices differently.\n"
      ],
      "id": "c12fc03d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}